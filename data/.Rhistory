}#
}#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=NULL, shift=c(10,10,20,10,20,50),nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=0, shift=c(10,10,20,10,20,50),nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=NULL, shift=c(10,10,20,10,20,50),nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(10,10,20,10,20,50), shift=NULL,nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
fillFBS <- fillFBS(FBS)#
fillFBS("USA",2009)#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.10,0.10,0.20,0.10,0.20,0.50), shift=NULL,nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
fillFBS <- fillFBS(FBS)#
fillFBS("USA",2009)#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.10,2,0.20,0.10,0.20,0.50), shift=NULL,nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.10,2,0.20,0.10,0.20,0.50), shift=0,nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
#
fillFBS <- fillFBS(FBS)#
fillFBS("USA",2009)#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.10,0.2,0.20,0.10,0.20,0.50), shift=0,nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.10,0.2,0.20,0.10,0.20,0.50), shift=NULL,nIter = 10,objFun = function(tab){-colSums(tab)["Food"]},...)#
tab#
}#
}#
fillFBS <- fillFBS(FBS)#
fillFBS("USA",2009)#
counts <- table(mtcars$vs, mtcars$gear)#
counts#
barplot(counts)#
summam#
?aggregate#
library(datatable)#
library(data.table)#
#
fread#
rm(packages="conSTable")#
library(devtools)#
install_github("conSTable",username="mrpozzi",ref="master")#
library(conSTable)#
conSTable::.sampleTables#
remove.packages("conSTable") #
detach("package:conSTable")#
conSTable <-#
function(muTab, rowTot, prop=NULL, shift=0, controlCol, nIter=100, N=10000,sdev=5,verbose=TRUE,objFun=function(tab){-colSums(tab)[1]},fixedRows=NULL,fixed=c(),transpose=FALSE,...){#
#
if(transpose){#
muTab <- t(muTab)#
}#
#
colTot <- colSums(muTab)#
if(!is.null(prop) & !all(shift==0)) stop("Either prop between 0 and 1 and shift 0 or prop NULL and shift > 0")#
if(!is.null(prop)) {#
if(any(prop > 1)) stop("prop must be a number/vector with value/values between 0 and 1")#
} else if(all(shift==0)) stop("When prop is NULL shift must be > 0")#
#
if(!(is.null(prop) & all(shift==0))){#
#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
#
if(!is.null(prop)){#
#
if(missing(controlCol)) controlCol <- rbind(colTot*(1-prop*sign(colTot)),colTot*(1+prop*sign(colTot)))#
#
if(!is.null(dim(prop))|(length(prop)==1)){#
shift <- prop*sign(muTab)*muTab#
} else {#
shift <- as.matrix(do.call(cbind,lapply(1:length(prop),function(j) prop[j]*sign(muTab[,j])*muTab[,j] )))#
}#
#
} else {#
#
if(missing(controlCol)) {#
if(is.null(dim(shift))){#
controlCol <- rbind(colTot-shift,colTot+shift)#
} else {#
colShift <- apply(shift,1,max)#
controlCol <- rbind(colTot-colShift,colTot+colShift)#
}#
}#
#
if(is.null(dim(shift))&(length(shift)!=1)){#
shift <- as.matrix(do.call(rbind,lapply(1:nrow(muTab),function(i) shift)))#
}#
}#
#
bounds[,,"Lower"] <- as.matrix(muTab - shift)#
bounds[,,"Upper"] <- as.matrix(muTab + shift)#
#
bounds[,,"Lower"][is.na(muTab)] <- bounds[,,"Upper"][is.na(muTab)] <- muTab[is.na(muTab)] <- 0#
#
}#
#
.sampleTables(rowTot,muTab,bounds,controlCol,nIter=nIter,N=N,sdev=sdev,verbose=verbose,transpose=transpose,fixedRows=fixedRows,fixed=fixed,objFun=objFun,...)#
#
}#
FBS <- list(#
"Congo"=list("2008"=list(data=list(Cereals=c(458,33,NA,1,34,0),Roots_Tubers=c(1981,NA,NA,NA,223,0),Vegetables=c(45,NA,NA,NA,9,0),Fruit_Nuts=c(169,NA,NA,0,28,0),Pulses=c(34,NA,NA,1,2,0),Stim_Spices=c(1,NA,NA,NA,NA,0),Sugar=c(280,NA,NA,NA,8,0),Meat_Fish=c(135,NA,NA,NA,21,0),Dairy_Eggs=c(31,NA,NA,NA,1,0),VegOils_AnimalFats=c(562,NA,NA,NA,37,0),Alcoholic_bev=c(9,NA,NA,NA,NA,0)),row_Tot=c(526.4,2204.0,54.8,197.0,37.0,0.9,287.8,155.3,31.5,599.4,9.3)),#
"2009"=list(data=list(Cereals=c(538,32,0,1,40,0),Roots_Tubers=c(1922,0,0,0,216,0),Vegetables=c(45,0,0,0,9,0),Fruit_Nuts=c(160,0,0,0,27,0),Pulses=c(32,0,0,1,2,0),Stim_Spices=c(1,0,0,0,0,0),Sugar=c(91,0,0,0,2,0),Meat_Fish=c(157,0,0,0,24,0),Dairy_Eggs=c(31,0,0,0,1,0),VegOils_AnimalFats=c(612,0,0,0,41,0),Alcoholic_bev=c(9,0,0,0,0,0)),row_Tot=c(610.0,2138.6,54.3,186.7,34.7,0.9,93.4,181.1,31.6,652.7,9.0)),#
"2010"=list(data=list(Cereals=c(496,34,0,1,37,0),Roots_Tubers=c(1867,0,0,0,210,0),Vegetables=c(46,0,0,0,10,0),Fruit_Nuts=c(158,0,0,0,27,0),Pulses=c(29,0,0,1,1,0),Stim_Spices=c(0,0,0,0,0,0),Sugar=c(61,0,0,0,2,0),Meat_Fish=c(116,0,0,0,18,0),Dairy_Eggs=c(33,0,0,0,1,0),VegOils_AnimalFats=c(615,0,0,0,41,0),Alcoholic_bev=c(8,0,0,0,0,0)),row_Tot=c(567.2,2077.5,55.1,184.8,31.8,0.3,63.2,134.1,33.8,656.5,7.6))),#
"India"=list(#
"2008"=list(data=list(Cereals=c(1210,352,3,53,89,0),Roots_Tubers=c(101,0,0,8,5,0),Vegetables=c(93,0,0,0,12,0),Fruit_Nuts=c(134,0,0,0,14,0),Pulses=c(112,0,0,5,4,0),Stim_Spices=c(37,0,0,0,0,0),Sugar=c(234,0,0,15,4,0),Meat_Fish=c(17,0,0,0,1,0),Dairy_Eggs=c(218,0,0,0,3,0),VegOils_AnimalFats=c(245,0,2,0,13,0),Alcoholic_bev=c(0,0,0,0,0,0)),row_Tot=c(1707.1,114.5,104.2,147.8,122.1,37.0,252.4,18.2,221.3,260.5,0.1)),#
"2009"=list(data=list(Cereals=c(1203,356,1,52,89,0),Roots_Tubers=c(100,0,0,8,5,0),Vegetables=c(91,0,0,0,11,0),Fruit_Nuts=c(131,0,0,0,14,0),Pulses=c(122,0,0,5,5,0),Stim_Spices=c(23,0,0,0,0,0),Sugar=c(313,0,0,15,5,0),Meat_Fish=c(17,0,0,0,1,0),Dairy_Eggs=c(216,0,0,0,3,0),VegOils_AnimalFats=c(280,0,3,0,15,0),Alcoholic_bev=c(0,0,0,0,0,0)),row_Tot=c(1702.2,113.2,102.5,145.1,131.9,23.4,332.6,17.8,219.0,297.4,0.0)),#
"2010"=list(data=list(Cereals=c(1176,364,2,52,88,0),Roots_Tubers=c(99,0,0,8,5,0),Vegetables=c(90,0,0,0,11,0),Fruit_Nuts=c(127,0,0,0,13,0),Pulses=c(115,0,0,5,4,0),Stim_Spices=c(23,0,0,0,0,0),Sugar=c(264,0,0,14,4,0),Meat_Fish=c(16,0,0,0,1,0),Dairy_Eggs=c(214,0,0,0,3,0),VegOils_AnimalFats=c(277,0,4,0,15,0),Alcoholic_bev=c(0,0,0,0,0,0)),row_Tot=c(1680.3,111.8,101.7,140.5,124.4,23.3,282.6,17.2,216.6,296.7,0.1))),#
"USA"=list(#
"2008"=list(data=list(Cereals=c(4721,1980,2913,100,178,0),Roots_Tubers=c(148,0,0,9,5,0),Vegetables=c(121,0,0,0,3,0),Fruit_Nuts=c(238,0,0,0,4,0),Pulses=c(29,0,0,1,0,0),Stim_Spices=c(22,0,0,0,0,0),Sugar=c(1028,0,0,29,11,0),Meat_Fish=c(599,0,0,0,10,0),Dairy_Eggs=c(537,0,0,0,2,0),VegOils_AnimalFats=c(756,0,77,0,15,0),Alcoholic_bev=c(21,0,0,0,0,0)),row_Tot=c(9891.3,161.9,123.7,241.6,31.0,22.4,1068.0,609.4,539.0,847.5,20.9)),#
"2009"=list(data=list(Cereals=c(4627,1931,3604,99,188,0),Roots_Tubers=c(147,0,0,9,5,0),Vegetables=c(122,0,0,0,3,0),Fruit_Nuts=c(235,0,0,0,4,0),Pulses=c(28,0,0,1,0,0),Stim_Spices=c(27,0,0,0,0,0),Sugar=c(1013,0,0,29,11,0),Meat_Fish=c(604,0,0,0,10,0),Dairy_Eggs=c(538,0,0,0,2,0),VegOils_AnimalFats=c(756,0,67,0,14,0),Alcoholic_bev=c(26,0,0,0,0,0)),row_Tot=c(10448.4,161.7,124.5,239.4,30.1,27.2,1052.3,613.8,540.1,837.4,26.3)),#
"2010"=list(data=list(Cereals=c(4004,1904,3905,98,181,0),Roots_Tubers=c(145,0,0,9,5,0),Vegetables=c(122,0,0,0,3,0),Fruit_Nuts=c(236,0,0,0,4,0),Pulses=c(25,0,0,1,0,0),Stim_Spices=c(26,0,0,0,0,0),Sugar=c(967,0,0,29,10,0),Meat_Fish=c(594,0,0,0,10,0),Dairy_Eggs=c(522,0,0,0,2,0),VegOils_AnimalFats=c(678,0,101,0,14,0),Alcoholic_bev=c(34,0,0,0,0,0)),row_Tot=c(10091.9,159.2,124.3,240.1,26.5,26.3,1006.3,604.3,524.0,792.7,34.3))))#
FBS[["Congo"]][[as.character(2008)]]#
FBS[[Congo]]#
FBS[["Congo"]]#
#
fillFBS <- function(FBS){#
function(Country, year,...){#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
tab <- conSTable(muTab=mu_Tab, rowTot=row_Tot, prop=c(0.1,0.2,0.5,0.5,0.3,0.8), shift=c(20,30,40,50,50,100),nIter = 10,objFun = function(tab){-colSums(tab)[1]},...)#
tab#
}#
}#
Country <- "Congo"#
year <- 2008 #
mu_Tab#
fbs <- FBS[[Country]][[as.character(year)]]#
mu_Tab <- do.call(rbind,lapply(names(fbs$data),function(name)fbs$data[[name]]))#
mu_Tab#
dimnames(mu_Tab) <- list(names(fbs$data),c("Food","Feed","OtherUse","Seed","Losses","StVar"))#
row_Tot <- fbs$row_Tot#
row_Tot#
rowTot=row_Tot#
prop=c(0.1,0.2,0.5,0.5,0.3,0.8)#
shift=0#
nIter = 10#
objFun = function(tab){-colSums(tab)[1]}#
N=10000#
sdev=5#
verbose=TRUE#
fixedRows=NULL#
fixed=c()#
transpose=FALSE#
transpose#
colTot <- colSums(muTab)#
!is.null(prop#
!all(shift==0)#
any(prop > 1)#
all(shift==0)#
missing(controlCol)#
is.null(dim(prop)#
)#
shift <- as.matrix(do.call(cbind,lapply(1:length(prop),function(j) prop[j]*sign(muTab[,j])*muTab[,j] )))#
bounds[,,"Lower"][is.na(muTab)] <- bounds[,,"Upper"][is.na(muTab)] <- muTab[is.na(muTab)] <- 0#
bounds[,,"Lower"] <- as.matrix(muTab - shift)#
bounds[,,"Upper"] <- as.matrix(muTab + shift)#
mu_Tab#
prop#
shift#
shift = 0#
!is.null(prop) & !all(shift==0)#
!(is.null(prop) & all(shift==0))#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds#
!is.null(prop)#
controlCol <- rbind(colTot*(1-prop*sign(colTot)),colTot*(1+prop*sign(colTot)))#
!is.null(dim(prop))#
(length(prop)==1)#
shift <- as.matrix(do.call(cbind,lapply(1:length(prop),function(j) prop[j]*sign(muTab[,j])*muTab[,j] )))#
colShift <- apply(shift,1,max)#
colShift#
controlCol <- rbind(colTot-colShift,colTot+colShift)#
length(shift)!=1)#
length(shift)!=1#
is.null(dim(shift))#
bounds[,,"Lower"] <- as.matrix(muTab - shift)#
bounds[,,"Upper"] <- as.matrix(muTab + shift)#
muTab[is.na(muTab)]#
is.na(muTab)#
bounds#
bounds[,,"Lower"][is.na(muTab)] <- bounds[,,"Upper"][is.na(muTab)] <- 0#
muTab[is.na(muTab)] <- 0#
bounds#
controlCol#
muTab#
muTab=mu_Tab#
colTot <- colSums(muTab)#
colTot <- colSums(muTab,na.rm=T)#
colTot#
remove.packages("conSTable") #
detach("package:conSTable")#
install.packages("rmarkdown")#
FBS#
less fillFBS#
fillFBS#
ls()#
.path.package()#
list.files#
list.files()#
quasi#
? gettext#
for(n in 0:3)#
print(sprintf(ngettext(n, "%d variable has missing values",#
"%d variables have missing values"),#
n))#
#
?quasi#
require(Hmisc)#
x <- mds$points[,1]#
data#
data2#
ls()#
ls(FBS)#
FBS$Congo#
generate.data <- function()#
{#
n <- 100#
data <- data.frame(x = rep(NA, n), y= rep(NA, n), assignment = rep(NA, n))#
mu.x <- c(0, 5, 10, 15)#
mu.y <- c(0, 5, 0, -5)#
for (i in 1:n)#
{#
assignment <- sample(1:4, 1)#
data[i, 'x'] <- rnorm(1, mu.x[assignment], 1)#
data[i, 'y'] <- rnorm(1, mu.y[assignment], 1)#
data[i, 'assignment'] <- assignment#
}#
data <- transform(data, assignment = factor(assignment))#
return(data)#
}#
require(Hmisc)#
#
mds <- generate.data()#
x <- mds$points[,1]#
y <- mds$points[,2]#
mds#
x <- mds[,1]#
y <- mds[,2]#
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric  MDS",        col=as.numeric(q$SeqLabNumber) )#
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric  MDS")#
leg<-legend("topright",levels(q$SeqLabNumber),pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
leg<-legend("topright"pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
leg<-legend("topright",pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
levels(mds$assignment)#
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric  MDS",        col=as.numeric(mds$assignment) )#
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric  MDS",        col=as.numeric(mds$assignment), pch=19)#
cex.i<-1;#
leg<-legend("topright",levels(mds$assignment),pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
empty<-largest.empty(x,y,leg$rect$w,leg$rect$h)#
while(is.na(empty$x)){#
 cex.i<-cex.i*0.95#
 leg<-legend("topright",levels(q$SeqLabNumber),pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
 empty<-largest.empty(x,y,leg$rect$w,leg$rect$h)#
}#
legend(empty$x-(leg$rect$w/2),empty$y+(leg$rect$h/2),levels(q$SeqLabNumber),col=colours,pch=19,pt.lwd=1.5,cex=cex.i)#
leg<-legend("topright",levels(mds$assignment),pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
empty<-largest.empty(x,y,leg$rect$w,leg$rect$h)#
while(is.na(empty$x)){#
 cex.i<-cex.i*0.95#
 leg<-legend("topright",levels(mds$assignment),pch=19,pt.lwd=1.5,cex=cex.i,plot=FALSE)#
 empty<-largest.empty(x,y,leg$rect$w,leg$rect$h)#
}#
legend(empty$x-(leg$rect$w/2),empty$y+(leg$rect$h/2),levels(mds$assignment),col=colours,pch=19,pt.lwd=1.5,cex=cex.i)#
empty$x#
empty$y#
leg$rect$w/2#
legend(empty$x-(leg$rect$w/2),empty$y+(leg$rect$h/2),levels(mds$assignment),col=levels(mds$assignment),pch=19,pt.lwd=1.5,cex=cex.i)#
lapply(1:10, function(i){ browser(); mean(rnorm(10))})#
i#
mean(rnorm(10))#
c#
Q#
lapply(1:10, function(i){mean(rnorm(10))})#
install.packages("bnlearn")#
library(bnlearn)#
bnlearn::.__C__bn#
bnlearn::acyclic#
bnlearn::learn.nbr#
install.packages("dendextend")#
library(buster)#
vignette('dendextend')#
demo(dendextend)#
iris.dist<-dist(iris[,1:4])#
iris.dist#
bhc<-buster(iris.dist, n=250, k=3, size=0.66, method='ward', pct.exc=0.1)#
cluster<-bhc$obs.eval$cluster[order(bhc$obs.eval$obs.ind)]#
plot(iris[,1:4], col=6-cluster, pch = rep(15:17, each=50))#
x.1<-rnorm(50, 10, 3)#
y.1<-rnorm(50, 10, 3)#
x.2<-rnorm(50, 20, 3)#
y.2<-rnorm(50, 10, 3)#
x.3<-rnorm(50, 13, 3)#
y.3<-rnorm(50, 20, 3)#
test.data<-data.frame(group=rep(1:3, each=50), x=c(x.1, x.2, x.3), y=c(y.1, y.2, y.3))#
names<-c(paste0("group 1: ", 1:50), paste0("group 2: ", 1:50), paste0("group 3: ", 1:50))#
rownames(test.data)<-names#
dist<-dist(test.data[,-1])#
#
test.data#
bhc<-buster(dist, n=200, k=3, size=0.66, method='ward', pct.exc=0.1)#
buster::buster#
plot(bhc)#
graph.data<-cbind(test.data, bhc$obs.eval[order(bhc$obs.eval$obs.ind, decreasing=FALSE),])#
plot(graph.data$x, graph.data$y, xlim=c(0,30), ylim=c(0, 30), pch = graph.data$group, col=graph.data$cluster+1)#
max.co<-bhc$obs.eval$max.co[order(bhc$obs.eval$obs.ind)]#
alpha<-(max.co-min(max.co))/(max(max.co)-min(max.co))#
cols <- hsv(0,0,0,alpha)#
plot(graph.data$x, graph.data$y, xlim=c(0,30), ylim=c(0, 30), pch = 19, col=cols)#
#
install.packages(Rcmdr)#
#
install.packages("Rcmdr")#
library(Rcmdr)#
install.packages("aplpack")#
library(Rcmdr)#
#
Commander()#
?Rcmdr#
?log#
?boxplot#
oneobject <- 2#
oneobject#
anotherobject <- 3+6#
anotherobject#
oneobject <- 6^2#
oneobject#
x <- 45#
y <- 28*0.07#
mycalc <- (log(3)+x)*5*(6+y)^2#
mycalc#
a <- c(1,5,6,8,7,3,4,7,9,9,3,4,2)#
b <- c("blue","red","blue","yellow","orange","black","green","purple","white","pink","gray","blue","black")#
c <- c(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE)#
class(a)#
class(b)#
class(c)#
obj <- rbind(a,b,c) #
obj#
obj2 <- cbind(a,b,c) #
obj2#
class(obj2)#
obj <- data.frame(a,b,c)#
class(obj)#
?View#
View(obj)#
fix(obj)#
save(obj, file="obj.Rdata")#
var1 <- as.numeric(var1)#
var0 <- c(64,76,66,47,72,82,66,58,64,69,80,57,66,63,71,55,57,71,45,77,69,61,47,55,59,45,61,56,68,74,55,71,72,64,52,62,69,53,76,62,65,54,73,79,74,38,61,73,75,71,74,52,48,45,65,59,79,78,82,61,70,73,68,76,71,65,78,65,80,69,73,70,80,50,67,70,63,68,70,37,73,68,53,73,79,76,68,80,79,78,75,82,72,77,75,66,72,66,66,58,70,71,69,81,74,45,73,81,71,76,79,80,72,64,81,79,74,69,75,56,62,60,83,55,74,47,70,59,47,81,73,59,74,70,69,81,29,77,72,78,68,60,65,83,66,76,68,80,82,79,74,74,22,62,81,75,75,44,72,75,72,77,76,67,70,76,42,56,76,84,75,76,83,73,63,50,78,70,79,74,59,54,74,68,72,82,69,48,64,48,78,62,87,79,65,70,85,80,79,72,71,77,76,79,76,81,82,70,65,79,76,83,75,63,52,80,86,63,68,69,78,82,74,86,69,85,72,64,57,74,78,22,77,64,63,51,74,71,71,47,63,66,73,43,72,75,81,40,56,71,77,77,71,69,68,58,64,76,73,81,73,81,59,68,57,62,66,76,66,47,72,82,66,58,64,69,80,57,66,63,71,55,57,71,45,77,69,61,47,55,59,45,61,56,68,74,52,71,72,64,52,62,69,53,76,62,65,54,73,79,74,38,61,73,75,71,75,82,72,77,75,66,72,66,66,58,81,74,45,73,81,71,76,79,80,72,64,8
1,#
79,74,69,75,56,62,60,83,55,74,47,70,59,47,81,73,59,74,70,69,81,29,77,72,78,68,60,65,83,66,76,68,80,82,79,74,74,22,62,81,75,75,44,72,75,72,77,76,67,70,76,42,56,76,84,75,76,83,73,63)#
var1 <- c("1","2","1","2","1","1","1","1","1","1","1","1","1","1","1","2","2","1","1","1","2","1","2","1","1","1","1","1","1","1","2","2","1","2","1","1","1","1","1","1","2","1","1","1","1","1","1","2","2","1","2","1","2","2","1","1","1","2","1","2","2","2","2","2","1","1","1","1","1","1","1","1","2","1","1","1","2","1","1","1","1","2","1","1","1","1","1","2","1","2","1","1","1","1","1","1","1","2","1","1","1","2","1","1","2","1","1","2","2","2","1","2","1","2","1","1","1","1","2","2","2","2","2","1","1","1","1","2","2","1","1","1","1","1","1","2","1","1","2","1","2","1","1","1","1","1","2","1","1","1","1","1","2","1","1","2","1","2","1","1","1","1","1","2","1","2","2","1","2","2","1","1","1","1","1","2","2","1","1","1","2","1","2","1","1","1","1","1","1","1","1","1","1","2","1","1","1","2","2","1","2","1","1","1","1","2","1","1","1","1","1","1","2","2","1","1","1","1","2","1","1","1","1","2","1","2","1","1","2","1","1","1","1","1","2","2","1","1","1","1","1","1","1","1","1","2","1","2","1","1","1","2","1",
#
"2","2","1","1","1","1","1","1","1","1","1","1","2","1","2","1","1","1","1","2","1","1","1","2","1","2","2","1","1","1","1","2","1","1","1","1","1","1","1","1","1","1","1","2","1","1","1","2","1","1","1","2","2","1","1","2","2","1","1","1","2","1","1","1","1","1","2","1","1","1","1","1","2","1","2","2","1","1","1","1","1","2","1","2","1","1","1","1","1","1","2","1","2","1","1","1","1","1","1","2","2","1","1","2","1","2","2","1","2","2","1","2","2","2","1","2","1","2","2","1","1","1","1","1","1","1","1","1","2","2","1","1","2","2","2","1","2","2","2","2","1","2","1","1","2")#
var2 <- c("0","1","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","1","0","1","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","0","1","1","0","0","0","0","1","0","1","1","0","0","0","0","0","0","0","0","0","1","0","0","1","0","0","1","1","0","0","0","0","1","1","1","1","0","0","1","0","0","0","0","1","0","1","0","0","0","0","0","0","0","1","0","1","0","0","1","1","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","1","1","0","0","0","0","1","0","1","0","0","0","0","1","0","1","1","0","0","0","0","0","1","0","0","0","1","0","0","0","0","0","0","1","0","1","0","0","0","0","0","1","0","0","0","0","1","0","0","1","0","0","0","0","0","0","0","1","1","1","0","0","1","0","1","0","1","0","0","1","0","0","0","1","0","0","1","1","0","0","0","0","1","0","1","1","0","1","1","1","0","0","0","0","0","1","0","1","0","0","0","0","1","0","0",
#
"0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","1","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","1","0","0","0","0","0","1","1","0","1","0","0","1","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0","0","0","1","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0")#
var3 <- c("0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","1","0","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0","0","0","1","0","1","0","0","0","1","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","1","0","0","1","0","0","0","0","0","0","1","1","0","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","0","0","1","0","0","0","0","0","0","0","0","1","0","0","1","0","0","1","0","0","0","0","1","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0","0","1","1","1","1","0","0","0","0","0","0","0","0","0","0",
#
"0","0","1","0","0","0","1","0","0","0","0","1","0","0","0","1","0","0","0","0","0","0","0","0","1","0","0","1","0","0","0","1","1","0","1","0","0","0","0","0","0","0","0","1","1","1","0","1","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","1","0","0","1","0","0","0","0","1","0","1","0","1","0","0","0","1","0","0","0","0","0","0","0","0","0","1","1","0","0","0","1","0","0","0","0","0","0","1","0","1","0","1","1","1","1","0","0","0","0","1","0","0","1","0","0","0","1","1","0","0","0","0","0","0","0","0","0","1","1","0","0","0","1","0","0","0","1","0")#
var4 <- c("0","1","0","0","0","0","1","0","1","1","0","1","0","1","1","0","0","0","1","0","0","0","0","0","0","0","1","1","0","0","1","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","1","1","0","1","0","1","1","1","0","1","0","0","0","0","0","0","0","1","0","1","0","0","0","0","0","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","1","1","1","1","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1","1","0","0","1","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","0","0","1","0","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","0","0","1","0","1","0","0","0","1","1","0","0","1","0","1","0","1","0","0","1","1","1","1","1","0","0","0","0","0","0","1","0","1","1","0","1","1","0","1","0","1","0","1","0","0","0","0","1","1","1","1","0","0","1","1","1","1","1","0","1","0","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1",
#
"0","1","1","1","0","1","0","0","1","1","1","1","0","0","1","1","0","0","1","1","0","0","1","0","1","1","0","0","1","0","0","0","0","0","0","0","1","0","1","0","0","0","0","0","1","1","0","0","0","1","0","1","0","0","0","1","0","0","1","1","1","1","1","0","1","1","1","0","1","1","1","0","0","1","1","1","1","1","0","1","1","1","0","1","1","0","0","0","0","0","1","0","1","0","1","1","1","1","0","1","1","0","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","0","0","0","0","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","0")#
var5 <- c("0","1","1","0","0","1","0","0","0","0","0","1","0","1","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","1","0","1","0","0","0","0","0","1","0","0","0","0","0","1","0","0","0","0","0","1","0","0","0","0","1","0","0","1","0","0","1","0","0","1","1","0","0","0","0","0","1","0","0","1","0","1","1","1","0","0","0","0","0","0","0","0","1","0","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","0","0","1","1","0","1","0","0","0","1","0","1","1","1","0","0","0","1","0","0","0","0","0","0","1","0","0","0","0","1","0","1","0","0","1","1","0","0","1","1","1","0","0","0","0","0","0","1","1","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","1","1","1","0","1","1","0","0","1","0","1","1","0","1","1","0","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1",
#
"0","1","1","1","0","1","0","0","1","0","1","0","0","0","1","1","0","0","1","0","0","0","1","0","0","1","0","0","0","0","0","1","0","0","0","0","0","1","0","1","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","1","1","1","1","0","1","1","0","1","0","0","1","1","1","1","1","1","0","1","1","0","1","1","1","0","0","0","0","0","1","1","1","0","1","1","0","0","0","1","0","0","1","0","0","0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","0","1","1","1","0","0","0","0","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","0")#
var6 <- c("1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","1","0","0","1","1","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","0","0","0","0","0","0","1","0","0","0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0",
#
"1","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","0","1","1","1","1","0","0","0","0","1","0","0","0","1","1","1","1","1","1","0","1","0","0","0","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","0","0","0","1","1","1","0","1","1","1","1","0","1","0","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0")#
mydata <- data.frame(var0,var1,var2,var3,var4,var5,var6)
View(mydata)#
summary(mydata$var0)#
mean(mydata$var0) #
sd(mydata$var0)
summary(mydata$var3)#
mydata$var1 <- as.numeric(mydata$var1)#
mydata$var1 <- as.factor(mydata$var1)#
hist(obj$a)#
hist(mydata$var0)
hist(mydata$var0, breaks=30)#
plot(obj$b)#
plot(mydata$var1)#
boxplot(var0 ~ var3, data = mydata, col = "lightgray")#
boxplot(var0 ~ var2, data = mydata, col = "blue")#
shapiro.test(mydata$var0)
qqnorm(mydata$var0)#
qqline(mydata$var0)#
qqnorm(mydata$var0)#
qqline(mydata$var0)#
library(car) #
qqPlot(mydata$var0)#
hist(mydata$var0)#
tapply(mydata$var0, mydata$var1, var, na.rm=TRUE)#
leveneTest(mydata$var0, mydata$var1, center=median)
mytab <- xtabs(~var1 + var2, data=mydata)#
mytab #
mytest <- chisq.test(mytab, correct=FALSE)#
mytest
fisher.test(mytab)
tapply(mydata$var0, mydata$var3, median, na.rm=TRUE)#
wilcox.test(var0 ~ var3, alternative="two.sided", data=mydata)#
g1 <- glm(var2 ~ var0 + var1, family=binomial(logit), data=mydata)#
summary(g1)#
library(foreign)#
mydata <- read.spss("somedata.sav", use.value.labels=T, to.data.frame=T)#
names(mydata)#
summary(mydata)#
names(mydata)#
summary(mydata)#
library(XLConnect, pos=4)#
library(gdata)#
getwd()#
ls()#
mydata#
m <- mydata[,c(1,2,3)]#
a <- mapply(function(x,y) c(x,y,m[x,y], 1:dim(m)[1], 1:dim(m)[2])#
)#
a#
?mapply#
dim(m)[1]#
dim(m)[2]#
a <- mapply(function(x,y) return c(x,y,m[x,y]), 1:dim(m)[1], 1:dim(m)[2])#
#
a <- mapply(function(x,y) c(x,y,m[x,y]), 1:dim(m)[1], 1:dim(m)[2])#
a <- mapply(function(x,y) c(x,y,m[x,y]), 1:dim(m)[1], 1:dim(m)[2])#
#
1:dim(m)[1]#
1:dim(m)[2]#
mapply(function(x,y) c(x,y,m[x,y]), 1:dim(m)[1], 1:dim(m)[2])#
head(m)#
mapply(function(x,y) paste(x,y,m[x,y],sep=","), 1:dim(m)[1], 1:dim(m)[2])#
#
mapply(function(x,y) paste(x,y,m[x,y],sep=","), 1:dim(m)[1], 1:dim(m)[2])#
dim(m)#
m[398,3]#
mapply(function(x,y) paste(x,y,as.numeric(m[x,y]),sep=","), 1:dim(m)[1], 1:dim(m)[2])#
#

library(devtools)#

install_github("conSTable",username="marcogarieri")#

library(conSTable)#

#
#

setwd("Documents/conSTable/data/")#

file <- "ContTabClean.csv"#
file0 <- "struct_zero.csv"#
FBS <- readFBS(file,file0)#

FBS[["Congo"]][[as.character(2008)]]#

balanceOne <- balanceFBS(FBS)#

balanceOne("Congo",2008,oset=c(30,30,40,50,50,10000),prop=NULL, nIter = 10,objFun = function(tab){-colSums(tab)[1]},verbose=TRUE)#

remove.packages("conSTable") #
#

detach("package:conSTable")#

detach("package:conSTable")#
#

remove.packages("conSTable") #

library(devtools)#
#

install_github("conSTable",username="mrpozzi",ref="master")#

